AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless E-Commerce App - DynamoDB, Lambda, and API Gateway

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    Description: Environment name (e.g., dev, prod)
  LambdaArtifactBucket:
    Type: String
    Description: S3 bucket holding Lambda artifacts
  LambdaArtifactKey:
    Type: String
    Description: Key in the S3 bucket for the Lambda artifact

Resources:
  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${EnvironmentName}-Products"
      AttributeDefinitions:
        - AttributeName: productId
          AttributeType: S
      KeySchema:
        - AttributeName: productId
          KeyType: HASH
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ProductsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EnvironmentName}-ProductsLambdaRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                Resource: "*"

  ProductsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${EnvironmentName}-ProductsLambda"
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt ProductsLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaArtifactBucket
        S3Key: !Ref LambdaArtifactKey
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref ProductsTable

  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${EnvironmentName}-EcommerceAPI"

  ApiGatewayResourceProducts:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGateway
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: "products"

  ApiGatewayMethodGetProducts:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref ApiGatewayResourceProducts
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductsLambdaFunction.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodGetProducts
    Properties:
      RestApiId: !Ref APIGateway
      StageName: !Sub "${EnvironmentName}"

Outputs:
  APIGatewayUrl:
    Description: "API Gateway Invoke URL"
    Value: !Sub "https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}"
