AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless E-Commerce App with API Gateway, Cart + Cognito Auth

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    Description: Environment name (e.g., dev, prod)

  LambdaFunctionName:
    Type: String
    Default: ProductsLambda
    Description: Name of the Products Lambda function

  LambdaArtifactBucket:
    Type: String
    Description: S3 bucket for Lambda .zip

  LambdaArtifactKey:
    Type: String
    Description: S3 key (file path) for Lambda .zip

  LambdaTimeout:
    Type: Number
    Default: 10
    Description: Timeout for Lambda function in seconds

Resources:
  ProductsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Products
      AttributeDefinitions:
        - AttributeName: productId
          AttributeType: S
      KeySchema:
        - AttributeName: productId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true

  ShoppingCartTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ShoppingCart
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: itemId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: itemId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${EnvironmentName}-UserPool"
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${EnvironmentName}-UserPoolClient"
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false

  ApiGatewayCognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub "${EnvironmentName}-CognitoAuthorizer"
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ApiGatewayRestApi
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn

  ProductsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EnvironmentName}-ProductsLambdaRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Products"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ShoppingCart"

  ProductsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${EnvironmentName}-${LambdaFunctionName}"
      Runtime: python3.9
      Handler: products/lambda_function.lambda_handler
      Role: !GetAtt ProductsLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaArtifactBucket
        S3Key: !Ref LambdaArtifactKey
      Timeout: !Ref LambdaTimeout
      MemorySize: 512
      Environment:
        Variables:
          ENVIRONMENT: !Ref EnvironmentName

  ShoppingCartLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${EnvironmentName}-ShoppingCartLambda"
      Runtime: python3.9
      Handler: orders/lambda_function.lambda_handler
      Role: !GetAtt ProductsLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaArtifactBucket
        S3Key: !Ref LambdaArtifactKey
      MemorySize: 512
      Timeout: 10
      Environment:
        Variables:
          CART_TABLE: "ShoppingCart"

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${EnvironmentName}-EcommerceAPI"
      Description: "API Gateway for Serverless E-Commerce App"

  ApiGatewayResourceProducts:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: products
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodGetProduct:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      ResourceId: !Ref ApiGatewayResourceProducts
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductsLambdaFunction.Arn}/invocations"

  ApiGatewayMethodPostProduct:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      ResourceId: !Ref ApiGatewayResourceProducts
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductsLambdaFunction.Arn}/invocations"

  ApiGatewayMethodDeleteProduct:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "DELETE"
      ResourceId: !Ref ApiGatewayResourceProducts
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductsLambdaFunction.Arn}/invocations"

  ApiGatewayResourceCart:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: cart
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodGetCart:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayCognitoAuthorizer
      HttpMethod: GET
      ResourceId: !Ref ApiGatewayResourceCart
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShoppingCartLambdaFunction.Arn}/invocations"

  ApiGatewayMethodPostCart:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayCognitoAuthorizer
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResourceCart
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShoppingCartLambdaFunction.Arn}/invocations"

  ApiGatewayMethodDeleteCart:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayCognitoAuthorizer
      HttpMethod: DELETE
      ResourceId: !Ref ApiGatewayResourceCart
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShoppingCartLambdaFunction.Arn}/invocations"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodGetProduct
      - ApiGatewayMethodPostProduct
      - ApiGatewayMethodDeleteProduct

    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: dev

  LambdaPermissionApiGatewayGet:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProductsLambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/products"

  LambdaPermissionApiGatewayPost:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProductsLambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/products"

  LambdaPermissionApiGatewayDelete:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProductsLambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/DELETE/products"

  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-LambdaErrorAlarm"
      AlarmDescription: "Alarm for Lambda function errors"
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref ProductsLambdaFunction
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - arn:aws:sns:us-east-1:211125598740:cicd-notifications

Outputs:
  ProductsLambdaFunctionName:
    Value: !Ref ProductsLambdaFunction
    Description: "Name of the Products Lambda function"

  ApiGatewayUrl:
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev/products"
    Description: "URL of the API Gateway for Products"